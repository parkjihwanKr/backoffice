name: Java CI/CD with Gradle

on:
  # push:
    # branches: [ "master" ]
  # pull_request:
    # branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      # grant permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # gradle caching
      - name: Gradle Caching
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # make application-prod.yml
      - name: Make application-prod.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION }}" > src/main/resources/application-prod.yml
        shell: bash

      - name: Verify application-prod.yml
        run: cat src/main/resources/application-prod.yml

      # Build Gradle
      - name: Build with Gradle
        run: ./gradlew assemble

      # test code build
      - name: Test with Gradle
        run: ./gradlew test

      # CD
      # docker login
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: find Dockerfile
        run: find . -name Dockerfile

      - name: Docker Image Build And Push
        run: |
          docker build -f Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/backoffice:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backoffice:latest

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          source: "./docker-compose.yml"
          target: "/home/ubuntu"

      - name: Run Application with Docker Compose
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          port: 22
          script: |
            cd /home/ubuntu
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" > .env
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
            sudo docker rm -f backoffice || true
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/backoffice || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/backoffice
            sudo docker-compose down
            sudo docker-compose up -d
            sudo docker image prune -f